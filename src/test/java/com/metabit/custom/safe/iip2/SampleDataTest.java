package com.metabit.custom.safe.iip2;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.math.BigInteger;
import java.util.BitSet;

/**
 * testing the test vectors from the theory document
 */
public class SampleDataTest
{
    static int    secpar        = 512;
    static String rawLowercaseX = "11990387324864793083207568453720269749904756042603491037825239651753954006251687597704641427851519318118841187146158762898335856066383242669304977234488953";
    static String rawUppercaseX = "11100100111011111100101011011010110110010111101001101011011001001000000000110111010100001011100010111000110000111011001100011101001100111000001100010011111001011001111000110100111011000101100100110101111100000011101100011110011010110001000001110011101101010010000011011010101110000000010101110000001001100110010100001101110101100111110000000101111111110110000001110011110111010111000011000001101011010110010111011101000100010111110011010001010000100010000101011110100110100101100111110110010111100110111001111001";
    static String rawLowercaseY = "12990387324864793083207568453720269749904756042603491037825239651753954006251687597704641427851519318118841187146158762898335856066383242669304977234488953";
    static String rawUppercaseY = "11111000000001111011000011001010000101000010110110010010011001001101111000011101001111111010000010111000001111101110001001101001011011111111100111101101010100111111100010110000100011100100101011101101000111100011011010011110010000011010110000010110110011111000111000101110011000111101101010001111000101001110110110100000000110110011111010011011001100111010101001110011110111010111000011000001101011010110010111011101000100010111110011010001010000100010000101011110100110100101100111110110010111100110111001111001";
    static String rawUppercaseZ = "00000000111111111011000011001010000101000010110110010010011001001101111000011101001111111010000010111000001111101110001001101001011011111111100111101101010100111111100010110000100011100100101011101101000111100011011010011110010000011010110000010110110011111000111000101110011000111101101010001111000101001110110110100000000110110011111010011011001100111010101001110011110111010111000011000001101011010110010111011101000100010111110011010001010000100010000101011110100110100101100111110110010111100110111001111001";

    @Test
    void testConsistency()
        {
        BigInteger x = new BigInteger(rawLowercaseX);
        // for X, we have to convert a binary set to bytes.
        BigInteger y = new BigInteger(rawLowercaseY);
        // for Y, we have to convert a binary set to bytes.
        BigInteger z = new BigInteger(rawUppercaseZ);

        // we know that, for our example, y = x + 10^153 should hold true.
        BigInteger expectedDifference = BigInteger.TEN.pow(153);
        BigInteger actualDifference = y.subtract(x);

        Assertions.assertEquals(expectedDifference, actualDifference);
        }

    @Test
    void testParameters()
        {


        }
}
