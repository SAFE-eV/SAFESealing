<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>com.metabit.custom.safe</groupId>
	<artifactId>safesealing</artifactId>
	<packaging>jar</packaging>
	<version>0.9.2</version>
	<name>SAFEevSealing</name>

	<licenses>
		<license>
			<name>CC-BY-ND</name>
			<url>https://creativecommons.org/licenses/by-nd/4.0/</url>
			<distribution>repo</distribution>
		</license>
	</licenses>
	<organization>
		<name>SAFE e.V.</name>
		<url>https://www.safe-ev.de/</url>
	</organization>
	<developers>
		<developer>
			<organization>metabit</organization>
			<organizationUrl>https://www.metabit.com/</organizationUrl>
		</developer>
	</developers>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>8</maven.compiler.source>
		<maven.compiler.target>8</maven.compiler.target>
		<lombok.version>1.18.30</lombok.version>
		<slf4j.version>2.0.9</slf4j.version>
		<semver.version>0.9.33</semver.version>
		<commons-cli.version>1.5.0</commons-cli.version>
		<junit.version>5.10.0</junit.version>
		<mainclass>com.metabit.custom.safe.safeseal.CommandLineMain</mainclass>
	</properties>

	<dependencies>
		<!-- version format -->
		<dependency>
			<groupId>org.semver</groupId>
			<artifactId>api</artifactId>
			<version>${semver.version}</version>
		</dependency>
		<!-- commandline parameter parsing -->
		<dependency>
			<groupId>commons-cli</groupId>
			<artifactId>commons-cli</artifactId>
			<version>${commons-cli.version}</version>
		</dependency>

		<dependency>
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcprov-jdk18on</artifactId>
			<version>1.72</version>
		</dependency>

		<!-- NIST certified crypto provider -->
		<!-- dependency>
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcprov-jdk15on</artifactId>
			<version>1.70</version>
		</dependency -->
		<!-- simpler ASN.1 DER support -->
		<!-- dependency>
			<groupId>org.metabit.library.format.tlv</groupId>
			<artifactId>TLVIterator</artifactId>
			<version>0.3.2-SNAPSHOT</version>
		</dependency -->

		<!-- commandline parsing for commandline test tool -->
		<dependency>
			<groupId>info.picocli</groupId>
			<artifactId>picocli</artifactId>
			<version>4.7.5</version>
		</dependency>

		<!-- reducing java boilerplate code -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
			<scope>provided</scope>
		</dependency>
		<!-- test logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>${slf4j.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- test support -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-params</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- not available publicly yet -->
		<dependency>
			<groupId>org.metabit.library.misc</groupId>
			<artifactId>utils</artifactId>
			<version>0.1.15-SNAPSHOT</version>
			<scope>test</scope>
			<!--
			referencing the local JAR file contained in the repository
			was possible this way
			<scope>system</scope>
			<systemPath>${project.basedir}/src/test/resources/lib/utils-0.1.15-SNAPSHOT.jar</systemPath>
	 		but has been deprecated.  no viable alternative has been offered by maven maintainers, yet.
			see [MNG-6523](https://issues.apache.org/jira/browse/MNG-6523) -
			-->
		</dependency>

	</dependencies>

	<!-- build settings and extensions, boilerplate -->
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<inherited>true</inherited>
				<configuration>
					<source>9</source>
					<target>9</target>
				</configuration>
			</plugin>

			<plugin> <!-- make JAR executable -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
				<executions>
					<execution>
						<goals>
							<goal>java</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<mainClass>${mainclass}</mainClass>
				</configuration>
			</plugin>

			<plugin> <!-- packages a runnable jar without dependencies -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.3.0</version>
				<configuration>
					<archive>
						<manifest>
							<mainClass>${mainclass}</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<plugin> <!-- repackages it into a runnable jar with all required dependencies -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>3.3.0</version>
				<configuration>
					<shadedArtifactAttached>true</shadedArtifactAttached>
					<shadedClassifierName>runnable</shadedClassifierName>
					<filters>
						<filter>
							<!-- ignore metadata which is known to overlap between dependencies -->
							<artifact>*:*</artifact>
							<excludes>
								<exclude>META-INF/*.SF</exclude>
								<exclude>META-INF/*.DSA</exclude>
								<exclude>META-INF/*.RSA</exclude>
								<exclude>META-INF.versions.9.module-info</exclude>
								<exclude>META-INF/MANIFEST.MF</exclude>
								<exclude>META-INF/LICENSE.txt</exclude>
							</excludes>
						</filter>
					</filters>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin> <!-- Generate JavaDocs during package stage -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.4.0</version>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Generates a source code JAR during package -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.2.1</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- compile and build C code -->
			<plugin>
				<groupId>com.github.maven-nar</groupId>
				<artifactId>nar-maven-plugin</artifactId>
				<version>3.10.1</version>
				<extensions>true</extensions>
			</plugin>
			<!-- test runner -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M7</version>
				<dependencies>
					<dependency>
						<groupId>org.junit.jupiter</groupId>
						<artifactId>junit-jupiter-engine</artifactId>
						<version>5.3.2</version>
					</dependency>
				</dependencies>
			</plugin>

			<!-- make packaged library available to local repository.
				 The better option, system/systempath dependency, has been deprecated.
			 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
				<version>2.5.2</version>
				<executions>
					<execution>
						<id>install-external</id>
						<phase>process-resources</phase>
						<configuration>
							<file>${basedir}/src/test/resources/lib/utils-0.1.15-SNAPSHOT.jar</file>
							<repositoryLayout>default</repositoryLayout>
							<groupId>org.metabit.library.misc</groupId>
							<artifactId>utils</artifactId>
							<version>0.1.15-SNAPSHOT</version>
							<packaging>jar</packaging>
							<generatePom>true</generatePom>
						</configuration>
						<goals>
							<goal>install-file</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>

	</profiles>

</project>
